!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a74b847/
ALSO_BOUGHT	kg_utils.py	/^ALSO_BOUGHT = 'also_bought'$/;"	v
ALSO_BOUGHT	utils.py	/^ALSO_BOUGHT = 'also_bought'$/;"	v
ALSO_VIEWED	kg_utils.py	/^ALSO_VIEWED = 'also_viewed'$/;"	v
ALSO_VIEWED	utils.py	/^ALSO_VIEWED = 'also_viewed'$/;"	v
AmazonDataLoader	data_utils.py	/^class AmazonDataLoader(object):$/;"	c
AmazonDataset	data_utils.py	/^class AmazonDataset(object):$/;"	c
BELONG_TO	kg_utils.py	/^BELONG_TO = 'belongs_to'$/;"	v
BELONG_TO	utils.py	/^BELONG_TO = 'belongs_to'$/;"	v
BOUGHT_TOGETHER	kg_utils.py	/^BOUGHT_TOGETHER = 'bought_together'$/;"	v
BOUGHT_TOGETHER	utils.py	/^BOUGHT_TOGETHER = 'bought_together'$/;"	v
BRAND	kg_utils.py	/^BRAND = 'brand'$/;"	v
BRAND	utils.py	/^BRAND = 'brand'$/;"	v
CATEGORY	kg_utils.py	/^CATEGORY = 'category'$/;"	v
CATEGORY	utils.py	/^CATEGORY = 'category'$/;"	v
DATA_DIR	kg_utils.py	/^DATA_DIR = dict($/;"	v
DATA_DIR	utils.py	/^DATA_DIR = dict($/;"	v
DESCRIBED_AS	kg_utils.py	/^DESCRIBED_AS = 'described_as'$/;"	v
DESCRIBED_AS	utils.py	/^DESCRIBED_AS = 'described_as'$/;"	v
EPS	kg_utils.py	/^EPS = np.finfo(np.float32).eps.item()$/;"	v
F	models.py	/^import torch.nn.functional as F$/;"	I
KG_RELATION	kg_utils.py	/^KG_RELATION = {$/;"	v
Knowledge graph embedding	README.md	/^# Knowledge graph embedding$/;"	c
KnowledgeEmbedding	models.py	/^class KnowledgeEmbedding(nn.Module):$/;"	c
KnowledgeGraph	knowledge_graph.py	/^class KnowledgeGraph(object):$/;"	c
LABELS	kg_utils.py	/^LABELS = dict($/;"	v
MENTION	kg_utils.py	/^MENTION = 'mentions'$/;"	v
MENTION	utils.py	/^MENTION = 'mentions'$/;"	v
MODEL_FILE	kg_utils.py	/^MODEL_FILE = {$/;"	v
PATH_PATTERN	kg_utils.py	/^PATH_PATTERN = {$/;"	v
PRODUCED_BY	kg_utils.py	/^PRODUCED_BY = 'produced_by'$/;"	v
PRODUCED_BY	utils.py	/^PRODUCED_BY = 'produced_by'$/;"	v
PRODUCT	kg_utils.py	/^PRODUCT = 'product'$/;"	v
PRODUCT	utils.py	/^PRODUCT = 'product'$/;"	v
PURCHASE	kg_utils.py	/^PURCHASE = 'purchase'$/;"	v
PURCHASE	utils.py	/^PURCHASE = 'purchase'$/;"	v
RPRODUCT	kg_utils.py	/^RPRODUCT = 'related_product'$/;"	v
RPRODUCT	utils.py	/^RPRODUCT = 'related_product'$/;"	v
SELF_LOOP	kg_utils.py	/^SELF_LOOP = 'self_loop'  # only for kg env$/;"	v
USER	kg_utils.py	/^USER = 'user'$/;"	v
USER	utils.py	/^USER = 'user'$/;"	v
WORD	kg_utils.py	/^WORD = 'word'$/;"	v
WORD	utils.py	/^WORD = 'word'$/;"	v
__call__	knowledge_graph.py	/^    def __call__(self, eh_type, eh_id=None, relation=None):$/;"	m	class:KnowledgeGraph
__init__	data_utils.py	/^    def __init__(self, data_dir, set_name='train', word_sampling_rate=1e-4):$/;"	m	class:AmazonDataset
__init__	data_utils.py	/^    def __init__(self, dataset, batch_size):$/;"	m	class:AmazonDataLoader
__init__	knowledge_graph.py	/^    def __init__(self, dataset):$/;"	m	class:KnowledgeGraph
__init__	models.py	/^    def __init__(self, dataset, args):$/;"	m	class:KnowledgeEmbedding
_add_edge	knowledge_graph.py	/^    def _add_edge(self, etype1, eid1, relation, etype2, eid2):$/;"	m	class:KnowledgeGraph
_clean	knowledge_graph.py	/^    def _clean(self):$/;"	m	class:KnowledgeGraph
_compute_idf	utils.py	/^def _compute_idf(freq_dict_list, docs):$/;"	f
_compute_tf	utils.py	/^def _compute_tf(freq_dict_list):$/;"	f
_create_freq_dict	utils.py	/^def _create_freq_dict(docs):$/;"	f
_entity_embedding	models.py	/^    def _entity_embedding(self, vocab_size):$/;"	m	class:KnowledgeEmbedding
_get	knowledge_graph.py	/^            _get = lambda e, i, r: self.get_tails_given_user(e, i, r, uid)$/;"	f	member:KnowledgeGraph.heuristic_search	file:
_load_entities	knowledge_graph.py	/^    def _load_entities(self, dataset):$/;"	m	class:KnowledgeGraph
_load_file	data_utils.py	/^    def _load_file(self, filename):$/;"	m	class:AmazonDataset
_load_knowledge	knowledge_graph.py	/^    def _load_knowledge(self, dataset):$/;"	m	class:KnowledgeGraph
_load_reviews	knowledge_graph.py	/^    def _load_reviews(self, dataset, word_tfidf_threshold=0.1, word_freq_threshold=5000):$/;"	m	class:KnowledgeGraph
_make_distrib	models.py	/^    def _make_distrib(self, distrib):$/;"	m	class:KnowledgeEmbedding
_relation_bias	models.py	/^    def _relation_bias(self, vocab_size):$/;"	m	class:KnowledgeEmbedding
_relation_embedding	models.py	/^    def _relation_embedding(self):$/;"	m	class:KnowledgeEmbedding
a	models.py	/^    a = F.normalize(a, p=2, dim=1)$/;"	v
a	models.py	/^    a = torch.FloatTensor([[1,1,1], [1,2,3]])$/;"	v
args	knowledge_graph.py	/^    args = parser.parse_args()$/;"	v
b	models.py	/^    b = torch.sum(a * a, dim=1)$/;"	v
check_test_path	knowledge_graph.py	/^def check_test_path(dataset_str, kg):$/;"	f
compute_degrees	knowledge_graph.py	/^    def compute_degrees(self):$/;"	m	class:KnowledgeGraph
compute_loss	models.py	/^    def compute_loss(self, batch_idxs):$/;"	m	class:KnowledgeEmbedding
compute_pagerank	utils.py	/^def compute_pagerank(vocab, docs):$/;"	f
compute_tfidf	utils.py	/^def compute_tfidf(docs):$/;"	f
compute_tfidf_fast	kg_utils.py	/^def compute_tfidf_fast(vocab, docs):$/;"	f
create_word_sampling_rate	data_utils.py	/^    def create_word_sampling_rate(self, sampling_threshold):$/;"	m	class:AmazonDataset
edict	data_utils.py	/^from easydict import EasyDict as edict$/;"	x
edict	models.py	/^from easydict import EasyDict as edict$/;"	x
forward	models.py	/^    def forward(self, batch_idxs):$/;"	m	class:KnowledgeEmbedding
generate_embeddings	knowledge_graph.py	/^def generate_embeddings(dataset_str, hop, use_describe=True):$/;"	f
get	knowledge_graph.py	/^    def get(self, eh_type, eh_id=None, relation=None):$/;"	m	class:KnowledgeGraph
get_batch	data_utils.py	/^    def get_batch(self):$/;"	m	class:AmazonDataLoader
get_entities	kg_utils.py	/^def get_entities():$/;"	f
get_entity_tail	kg_utils.py	/^def get_entity_tail(entity_head, relation):$/;"	f
get_logger	kg_utils.py	/^def get_logger(logname):$/;"	f
get_relations	kg_utils.py	/^def get_relations(entity_head):$/;"	f
get_tails	knowledge_graph.py	/^    def get_tails(self, entity_type, entity_id, relation):$/;"	m	class:KnowledgeGraph
get_tails_given_user	knowledge_graph.py	/^    def get_tails_given_user(self, entity_type, entity_id, relation, user_id):$/;"	m	class:KnowledgeGraph
has_next	data_utils.py	/^    def has_next(self):$/;"	m	class:AmazonDataLoader
heuristic_search	knowledge_graph.py	/^    def heuristic_search(self, uid, pid, pattern_id, trim_edges=False):$/;"	m	class:KnowledgeGraph
kg_neg_loss	models.py	/^def kg_neg_loss(entity_head_embed, entity_tail_embed, entity_head_idxs, entity_tail_idxs,$/;"	f
load_dataset	kg_utils.py	/^def load_dataset(dataset):$/;"	f
load_embed	kg_utils.py	/^def load_embed(dataset, hop):$/;"	f
load_embed_model	kg_utils.py	/^def load_embed_model(dataset, hop):$/;"	f
load_entities	data_utils.py	/^    def load_entities(self):$/;"	m	class:AmazonDataset
load_kg	kg_utils.py	/^def load_kg(dataset):$/;"	f
load_labels	kg_utils.py	/^def load_labels(dataset, mode='train'):$/;"	f
load_paths	kg_utils.py	/^def load_paths(dataset, pattern_id):$/;"	f
load_product_relations	data_utils.py	/^    def load_product_relations(self):$/;"	m	class:AmazonDataset
load_reviews	data_utils.py	/^    def load_reviews(self):$/;"	m	class:AmazonDataset
logger	train_embedding.py	/^logger = None$/;"	v
main	data_utils.py	/^def main():$/;"	f
main	knowledge_graph.py	/^def main(args):$/;"	f
main	train_embedding.py	/^def main():$/;"	f
neg_loss	models.py	/^    def neg_loss(self, entity_head, relation, entity_tail, entity_head_idxs, entity_tail_idxs):$/;"	m	class:KnowledgeEmbedding
nn	models.py	/^import torch.nn as nn$/;"	I
nn	train_embedding.py	/^import torch.nn as nn$/;"	I
np	data_utils.py	/^import numpy as np$/;"	I
np	kg_utils.py	/^import numpy as np$/;"	I
np	knowledge_graph.py	/^import numpy as np$/;"	I
np	models.py	/^import numpy as np$/;"	I
np	train_embedding.py	/^import numpy as np$/;"	I
np	utils.py	/^import numpy as np$/;"	I
optim	train_embedding.py	/^import torch.optim as optim$/;"	I
parser	knowledge_graph.py	/^    parser = argparse.ArgumentParser()$/;"	v
plot_degrees	knowledge_graph.py	/^    def plot_degrees(self):$/;"	m	class:KnowledgeGraph
plt	knowledge_graph.py	/^import matplotlib.pyplot as plt$/;"	I
reset	data_utils.py	/^    def reset(self):$/;"	m	class:AmazonDataLoader
save_embed	kg_utils.py	/^def save_embed(dataset, hop, embed):$/;"	f
save_kg	kg_utils.py	/^def save_kg(dataset, kg):$/;"	f
save_paths	kg_utils.py	/^def save_paths(dataset, pattern_id, paths):$/;"	f
set_logger	train_embedding.py	/^def set_logger(logname):$/;"	f
set_random_seed	kg_utils.py	/^def set_random_seed(seed):$/;"	f
set_random_seed	train_embedding.py	/^def set_random_seed(seed):$/;"	f
set_top_matches	knowledge_graph.py	/^    def set_top_matches(self, u_u_match, u_p_match, u_w_match):$/;"	m	class:KnowledgeGraph
sp	kg_utils.py	/^import scipy.sparse as sp$/;"	I
sp	utils.py	/^import scipy.sparse as sp$/;"	I
test_compute_pagerank	utils.py	/^def test_compute_pagerank():$/;"	f
test_compute_tfidf	utils.py	/^def test_compute_tfidf():$/;"	f
test_kg_neg_loss	models.py	/^def test_kg_neg_loss():$/;"	f
train	train_embedding.py	/^def train(args):$/;"	f
trim_edges	knowledge_graph.py	/^    def trim_edges(self):$/;"	m	class:KnowledgeGraph
